import { build, files, version } from '$service-worker';

declare const self: ServiceWorkerGlobalScope;
const FILES = `cache-${version}`;

// `build` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const to_cache = build.concat(files);
const staticAssets = new Set(to_cache);

self.addEventListener('install', (event) => {
	event.waitUntil(
		(async () => {
			const cache = await caches.open(FILES);
			await cache.addAll(to_cache);
			self.skipWaiting();
		})()
	);
});

self.addEventListener('activate', (event) => {
	event.waitUntil(
		(async function () {
			// Feature-detect
			if (self.registration.navigationPreload) {
				// Enable navigation preloads!
				await self.registration.navigationPreload.enable();
			}

			caches.keys().then(async (keys) => {
				// delete old caches
				for (const key of keys) {
					if (key !== FILES) await caches.delete(key);
				}
				self.clients.claim();
			});
		})()
	);
});

/**
 * Fetch the asset from the network and store it in the cache.
 * Fall back to the cache if the user is offline.
 */
async function fetchAndCache(request: Request) {
	const cache = await caches.open(`offline-${version}`);

	try {
		const response = await fetch(request);
		cache.put(request, response.clone());
		return response;
	} catch (err) {
		const response = await cache.match(request);
		if (response) return response;

		throw err;
	}
}

self.addEventListener('fetch', (event) => {
	if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

	const url = new URL(event.request.url);

	// don't try to handle e.g. data: URIs
	const isHttp = url.protocol.startsWith('http');
	const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
	const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

	if (isHttp && !skipBecauseUncached) {
		event.respondWith(
			(async () => {
				// always serve static files and bundler-generated assets from cache.
				// if your application has other URLs with data that will never change,
				// set this variable to true for them and they will only be fetched once.
				const cachedAsset = isStaticAsset && (await caches.match(event.request));
				if (cachedAsset) return cachedAsset;

				const response = await event.preloadResponse;
				if (response) return response;

				return fetchAndCache(event.request);
			})()
		);
	}
});
